AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  ApplicationName:
    Type: String
    Default: ordering
  EnvironmentName:
    Type: String
    Description: The environment this infrastructure is being provisioned for.
    AllowedValues: [ dev, qa, uat, prod ]
    ConstraintDescription: must specify dev, qa, uat, or prod
  branch:
    Type: String
    Default: master
  logLevel:
    Type: String
    Description: Log level for Lambda functions
    AllowedValues: [ DEBUG, INFO, WARN, ERROR ]
    ConstraintDescription: must specify DEBUG, INFO, WARN, or ERROR
  kinesisStream:
    Type: String
    Description: 7Logs Kinesis Stream name to write to
    Default: prod-7LogsNormalKinesisStream
  writerRoleArn:
    Type: String
    Description: The ARN to the managed IAM policy that provides appropriate access to write to the 7Logs Kinesis Stream
    Default: arn:aws:iam::774047977279:role/app-7logs-master-infrastructure-pr-7LogsWriterRole-ONZ60NU7KSMV
  DockerImage:
    Type: String
    Default: 774047977279.dkr.ecr.us-east-1.amazonaws.com
  DeployableUnit:
    Type: String
    Description: Name of the Deployable Unit.
  InventoryKinesisShards:
    Type: String
    Description: Inventory Kinesis Shards
    Default: 2
Conditions:
  Production: !Equals [!Ref EnvironmentName, prod]
  Master: !Equals [!Ref branch, master]
  DevEnvironment: !Or [!Equals [!Ref branch, master], !Equals [!Ref branch, development]]
  Dev: !Equals [!Ref EnvironmentName, dev]
  OncePerAccount: !And
    - !Condition Master
    - !Or [!Equals [!Ref EnvironmentName, dev], !Equals [!Ref EnvironmentName, uat]]
  NonProd: !Or [!Equals [!Ref EnvironmentName, dev], !Equals [!Ref EnvironmentName, qa], !Equals [!Ref EnvironmentName, uat]]
Mappings:
  "961287003934": ## NonProd ##
    us-east-1:
      risOldMainVPCId: vpc-0187162d1ffd82352 #ris-data-test-main-east-vpc
      risNewTgwVPCId: vpc-0262828903bd8dc9f #ris-data-test-main-tgw-east-vpc
      risOldMainSubnetId1: subnet-080c6044b2a0add8f #ris-data-main-east-prv-1
      risOldMainSubnetId2: subnet-004ea9a3076d7998c #ris-data-main-east-prv-2
      risOldMainSubnetId3: subnet-077534b373abad146 #ris-data-main-east-pub-1
      risOldMainSubnetId4: subnet-004f604e91db59ae3 #ris-data-main-east-pub-2

      risOldMainIGWSubnetId1: subnet-0fe5db2138f6c7d6d #ris-data-main-east-pub-igw
      risNewTgwSubnetId1: subnet-0272665f1b8205fcf #ris-data-main-tgw-east-prv-1
      risNewTgwSubnetId2: subnet-0bae9263af2238dfc #ris-data-main-tgw-east-prv-2
      risEastOldCidr1: '172.22.211.128/25'
      risEastOldCidr2: '172.22.222.0/24'
      risEastOldCidr3: '172.22.203.0/25'
      risEastNewCidr1: '172.22.226.0/23'
      risWestOldCidr1: '172.22.202.128/25'
      risWestOldCidr2: '172.22.223.0/24'
      risWestOldCidr3: '172.22.203.128/25'
      risWestNewCidr1: '172.23.226.0/23'
      vpnusers: '172.16.0.0/16'
      OfficeUsersCidr: '172.28.0.0/15'
    us-west-2:
      risOldMainVPCId: vpc-0470c8b207a4f4c3f #ris-data-test-main-west-vpc
      risNewTgwVPCId: vpc-0ba0422149d0640e3 #ris-data-test-main-dx-west-vpc
      risOldMainSubnetId1: subnet-0c03e5c2019d71517 #ris-data-test-main-west-prv-1
      risOldMainSubnetId2: subnet-0e2503e58ebe844a0 #ris-data-test-main-west-prv-2
      risOldMainSubnetId3: subnet-0bc558e9a59ded28e #ris-data-test-main-west-pub-1
      risOldMainSubnetId4: subnet-0137a873543f97793 #ris-data-test-main-west-pub-2
      risNewTgwSubnetId1: subnet-096c3ff019f724553 #ris-data-test-west-dx-prv-1
      risNewTgwSubnetId2: subnet-00e2288588bd0343a #ris-data-test-west-dx-prv-2
      subnet3: subnet-0bc558e9a59ded28e
      risEastOldCidr1: '172.22.211.128/25'
      risEastOldCidr2: '172.22.222.0/24'
      risEastOldCidr3: '172.22.203.0/25'
      risEastNewCidr1: '172.22.226.0/23'
      risWestOldCidr1: '172.22.202.128/25'
      risWestOldCidr2: '172.22.223.0/24'
      risWestOldCidr3: '172.22.203.128/25'
      risWestNewCidr1: '172.23.226.0/23'
      vpnusers: '172.16.0.0/16'
      OfficeUsersCidr: '172.28.0.0/15'
  "806317452177": ## PRODUCTION ##
    us-east-1:
      risOldMainVPCId: vpc-0c4e9017349fd2492 #ris-data-prod-main-east-vpc
      risNewTgwVPCId: vpc-0e661f8beba4c7d9a #ris-data-prod-main-tgw-east-vpc
      risOldMainSubnetId1: subnet-02a93d1d267dc1c83 #ris-data-prod-main-east-prv-1
      risOldMainSubnetId2: subnet-0ba9e9ad01e5f8e32 #ris-data-prod-main-east-prv-2
      risOldMainSubnetId3: subnet-0f8fb99d0fbef8586 #ris-data-prod-main-east-pub-1
      risOldMainSubnetId4: subnet-07c538acb02223a7e #ris-data-prod-main-east-pub-2
      risNewTgwSubnetId1: subnet-0943ad275f22147e4 #ris-data-prod-main-tgw-east-prv-1
      risNewTgwSubnetId2: subnet-0a1f5cd21612a69a8 #ris-data-prod-main-tgw-east-prv-2
      risOldMainIGWSubnetId1: subnet-02a93d1d267dc1c83 #need to change this to IGW
      risEastOldCidr1: '172.22.212.0/25'
      risEastOldCidr2: '172.22.255.0/24'
      risEastNewCidr1: '172.22.225.0/24'
      risWestOldCidr1: '172.22.202.0/25'
      risWestNewCidr1: '172.23.225.0/24'
      vpnusers: '172.16.0.0/16'
      OfficeUsersCidr: '172.28.0.0/15'
    us-west-2:
      risOldMainVPCId: vpc-00c15ce4a276571a4 #ris-data-prod-main-west-vpc
      risNewTgwVPCId: vpc-02889895f44968cdd #ris-data-prod-dx-west-vpc
      risOldMainSubnetId1: subnet-0c73fcec8aacea3c2 #ris-data-prod-west-main-prv-1
      risOldMainSubnetId2: subnet-005b5ee0c1c25b92b #ris-data-prod-west-main-prv-2
      risOldMainSubnetId3: subnet-0c25b99752bfe4572 #ris-data-prod-west-main-pub-1
      risOldMainSubnetId4: subnet-06331c7b93cff4c8d #ris-data-prod-west-main-pub-2
      risNewTgwSubnetId1: subnet-092574739fb35c10b #ris-data-prod-west-dx-1
      risNewTgwSubnetId2: subnet-00f1f00acdbec397a #ris-data-prod-west-dx-2
      cidr: 172.22.202.0/25
      risEastOldCidr1: '172.22.212.0/25'
      risEastOldCidr2: '172.22.255.0/24'
      risEastNewCidr1: '172.22.225.0/24'
      risWestOldCidr1: '172.22.202.0/25'
      risWestNewCidr1: '172.23.225.0/24'
      vpnusers: '172.16.0.0/16'
      OfficeUsersCidr: '172.28.0.0/15'
  environments:
    dev:
      cpuUnits: 512
      ramGB: 1GB
      MemoryReservationMB: 1024
      minCapacity: 2
      maxCapacity: 3
      hostedzoneid: Z2065JB2QKWK37
      cacheNodeType: cache.t2.medium
    qa:
      cpuUnits: 512
      ramGB: 1GB
      MemoryReservationMB: 1024
      minCapacity: 4
      maxCapacity: 8
      hostedzoneid: Z16MFBOF4M8ITU
      cacheNodeType: cache.t2.medium
    uat:
      cpuUnits: 512
      ramGB: 1GB
      MemoryReservationMB: 1024
      minCapacity: 2
      maxCapacity: 10
      hostedzoneid: Z1U5SYGSPUJGIQ
      cacheNodeType: cache.t2.medium
    prod:
      cpuUnits: 1024
      ramGB: 2GB
      MemoryReservationMB: 2048
      minCapacity: 4
      maxCapacity: 20
      hostedzoneid: ZOLOIAZ9YG9R5
      cacheNodeType: cache.r5.large
  dev:
    us-east-1:
      RISDNSCertificateArn: arn:aws:acm:us-east-1:961287003934:certificate/6dedf001-9c3b-49e7-be55-3007f15548d1
  qa:
    us-east-1:
      RISDNSCertificateArn: arn:aws:acm:us-east-1:961287003934:certificate/b6243fde-933c-4a06-9be8-5fa6a3df4351
  uat:
    us-east-1:
      RISDNSCertificateArn: arn:aws:acm:us-east-1:961287003934:certificate/b298cee2-5147-4a91-a70f-8ffcf2728101
  prod:
    us-east-1:
      RISDNSCertificateArn: arn:aws:acm:us-east-1:806317452177:certificate/8aeaa5ff-4a7c-4e1b-84f2-f720cdfa5734
Resources:
  ############### CONTAINER INFRASTRUCTURE ###############
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ContainerIamRole
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Fn::If:
          - Master
          - !Sub ${ApplicationName}-${EnvironmentName}
          - !Sub ${ApplicationName}-${branch}
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !FindInMap [ !Ref "AWS::AccountId", !Ref "AWS::Region", risOldMainVPCId ]
  EcsSecurityGroupHTTPinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '5000'
      ToPort: '5000'
      CidrIp: '0.0.0.0/0'
  Taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::If:
          - Master
          - !Sub ${ApplicationName}-${EnvironmentName}
          - !Sub ${ApplicationName}-${branch}
      Cpu: !FindInMap [ environments, !Ref EnvironmentName, cpuUnits ]
      Memory: !FindInMap [ environments, !Ref EnvironmentName, ramGB ]
      TaskRoleArn: !GetAtt ContainerIamRole.Arn
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name:
            Fn::If:
              - Master
              - !Sub ${ApplicationName}-${EnvironmentName}
              - !Sub ${ApplicationName}-${branch}
          Essential: 'true'
          Image: #NOTE See here for info on cross-account ECR access: https://aws.amazon.com/premiumsupport/knowledge-center/secondary-account-access-ecr/
            Fn::Join:
              - ""
              -
                - !Ref DockerImage
                - !Sub /${ApplicationName}-${branch}
                - ":"
                - COMMIT_HASH
          MemoryReservation: 1024
          PortMappings:
            - ContainerPort: 5000
          Environment:
            - Name: ApplicationName
              Value: RIS2.0
            - Name: ENVIRONMENT
              Value: !Ref EnvironmentName
            - Name: logLevel
              Value: !Ref logLevel
            - Name: logsKinesisStream
              Value: !Ref kinesisStream
            - Name: writerRoleArn
              Value: !Ref writerRoleArn
            - Name: PORT
              Value: 5000
            - Name: bff_base_url
              Value: 
                Fn::If:
                  - Production
                  - http://storesytemservice.ris.7-eleven.com
                  - !Sub 'http://storesytemservice.ris-${EnvironmentName}.7-eleven.com'
            - Name: originator
              Value: !Ref ApplicationName
            - Name: REDIS_URL
              Value:
                Fn::If:
                  - Production
                  - Fn::ImportValue: !Sub "ordering-config-endpoint-prod"
                  - Fn::ImportValue: !Sub "ordering-config-endpoint-dev"
            - Name: REDIS_PORT
              Value: 6379
            - Name: ENABLEDEBUGLOGS
              Value: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'CloudwatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Sub ${ApplicationName}
          HealthCheck:
            Command: [ "CMD-SHELL", "curl -f http://localhost:5000/healthcheck || exit 1" ]
            Interval : 10
            Retries: 2
            StartPeriod: 10
            Timeout: 5
  EcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerListener
    Properties:
      Cluster: !Ref ECSCluster
      # DeploymentConfiguration: #TODO look into this.
      #   DeploymentConfiguration
      DesiredCount: !FindInMap [ environments, !Ref EnvironmentName, minCapacity ]
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerPort: 5000
          ContainerName:
            Fn::If:
              - Master
              - !Sub ${ApplicationName}-${EnvironmentName}
              - !Sub ${ApplicationName}-${branch}
      ServiceName:
        Fn::If:
              - Master
              - !Sub ${ApplicationName}-${EnvironmentName}
              - !Sub ${ApplicationName}-${branch}

      NetworkConfiguration:
        AwsvpcConfiguration:
          #          Change this to AssignPublicIp: DISABLED
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !FindInMap [ !Ref "AWS::AccountId", !Ref "AWS::Region", risOldMainSubnetId3 ]
            - !FindInMap [ !Ref "AWS::AccountId", !Ref "AWS::Region", risOldMainSubnetId4 ]
      # PlacementConstraints: #TODO look into this.
      #  - PlacementConstraints, ...
      # PlacementStrategies: #TODO look into this.
      #  - PlacementStrategies, ...
      # Role: String #TODO look into this.
      # SchedulingStrategy: String #TODO look into this.
      # ServiceRegistries: #TODO look into this.
      #  - ServiceRegistry
      TaskDefinition: !Ref Taskdefinition
  ContainerIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::If:
          - Master
          - !Sub ${ApplicationName}-${EnvironmentName}-role
          - !Sub ${ApplicationName}-${branch}-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:*
                Resource: arn:aws:logs:*:*:*
        - PolicyName: LogsWriter
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Ref writerRoleArn
        - PolicyName: SecretManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                Resource: '*'
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:RegisterTargets"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:*"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "kinesis:*"
                Resource: '*'
        - PolicyName: LogsWriter
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Ref writerRoleArn
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::If:
          - Master
          - !Sub ${ApplicationName}-${EnvironmentName}
          - !Sub ${ApplicationName}-${branch}
      RetentionInDays: 7

  ############### CLOUD WATCH ALARM FOR SERVICE #############
  CPUUtilizationHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub VeryHighCPU-${ApplicationName}-${EnvironmentName}
      AlarmDescription: 'Service is running out of CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value:
            Fn::If:
              - Master
              - !Sub ${ApplicationName}-${EnvironmentName}
              - !Sub ${ApplicationName}-${branch}
      - Name: ServiceName
        Value:
            Fn::If:
              - Master
              - !Sub ${ApplicationName}-${EnvironmentName}-new
              - !Sub ${ApplicationName}-${branch}-new
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      AlarmActions:
      - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:testing_CloudWatch_Alarms_Topic

  MemoryUtilizationHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub VeryHighMemory-${ApplicationName}-${EnvironmentName}
      AlarmDescription: 'Service is running out of Memory'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value:
            Fn::If:
              - Master
              - !Sub ${ApplicationName}-${EnvironmentName}
              - !Sub ${ApplicationName}-${branch}
      - Name: ServiceName
        Value:
            Fn::If:
              - Master
              - !Sub ${ApplicationName}-${EnvironmentName}-new
              - !Sub ${ApplicationName}-${branch}-new
      MetricName: MemoryUtilization
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      AlarmActions:
      - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:testing_CloudWatch_Alarms_Topic

  ############### ECS AUTOSCALING ###############
  EcsScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - EcsService
      - ECSCluster
    Properties:
      MaxCapacity: !FindInMap [ environments, !Ref EnvironmentName, maxCapacity ]
      MinCapacity: !FindInMap [ environments, !Ref EnvironmentName, minCapacity ]
      ResourceId: !Sub
        - service/${clusterName}/${serviceName}
        - clusterName: !Ref ECSCluster
          serviceName: !GetAtt EcsService.Name
      RoleARN: !GetAtt [ EcsAutoScalingRole, Arn ]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  EcsScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ServiceTargetTracking
      PolicyType: TargetTrackingScaling #StepScaling and TargetTrackingScaling supported
      ScalingTargetId: !Ref EcsScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        DisableScaleIn: false
        ScaleInCooldown: 60
        ScaleOutCooldown: 15
        TargetValue: 80.0
  EcsAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - ecr:*
                Resource: '*'
  ############### LOAD BALANCER ###############
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !FindInMap [ !Ref "AWS::AccountId", !Ref "AWS::Region", risOldMainVPCId ]
      Port: 5000
      TargetType: ip
      Protocol: TCP
      HealthCheckPath: '/healthcheck'
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !FindInMap [ !Ref "AWS::AccountId", !Ref "AWS::Region", risOldMainSubnetId1 ]
        - !FindInMap [ !Ref "AWS::AccountId", !Ref "AWS::Region", risOldMainSubnetId2 ]
      Type: network
      Scheme: internal
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: 'true'
      Tags:
        - Key: Name
          Value:
            Fn::If:
              - Master
              - !Sub ${ApplicationName}-${EnvironmentName}
              - !Sub ${ApplicationName}-${branch}
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !FindInMap [ !Ref "EnvironmentName", !Ref "AWS::Region", RISDNSCertificateArn ]
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: TLS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
##############################################################
#################### NEW ECS SERVICE ##########################
  ############### New Network LOAD BALANCER ###############
#  LoadBalancerSecurityGroup:
#   Type: AWS::EC2::SecurityGroup
#   Properties:
#     GroupDescription: Load Balancer Security Group
#     VpcId: !FindInMap [ !Ref "AWS::AccountId", !Ref "AWS::Region", risOldMainVPCId  ]
#  LoadBalancerSecurityGroupInbound:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      GroupId: !Ref 'LoadBalancerSecurityGroup'
#      IpProtocol: tcp
#      FromPort: '443'
#      ToPort: '443'
#      CidrIp: '0.0.0.0/0'
  PublicTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: NonProd
    Properties:
      VpcId: !FindInMap [ !Ref "AWS::AccountId", !Ref "AWS::Region", risOldMainVPCId ]
      Port: 5000
      TargetType: ip
      Protocol: TCP
      HealthCheckPath: '/healthcheck'
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: NonProd
    Properties:
      Subnets:
        - !FindInMap [ !Ref "AWS::AccountId", !Ref "AWS::Region", risOldMainIGWSubnetId1 ]
      Type: network
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: 'true'
      Tags:
        - Key: Name
          Value:
            Fn::If:
              - Master
              - !Sub ${ApplicationName}-${EnvironmentName}
              - !Sub ${ApplicationName}-${branch}
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: NonProd
    Properties:
      Certificates:
        - CertificateArn: !FindInMap [ !Ref "EnvironmentName", !Ref "AWS::Region", RISDNSCertificateArn ]
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 443
      Protocol: TLS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PublicTargetGroup
#  LoadBalancerListenerRule:
#   Type: AWS::ElasticLoadBalancingV2::ListenerRule
#   Properties:
#     ListenerArn: !Ref PublicLoadBalancerListener
#     Priority: 100
#     Conditions:
#       - Field: path-pattern
#         Values: 
#           - /7boss/launch
#     Actions:
#       - TargetGroupArn: !Ref PublicTargetGroup
#         Type: forward
  PublicEcsService:
    Type: AWS::ECS::Service
    Condition: NonProd
    DependsOn:
      - PublicLoadBalancerListener
    Properties:
      Cluster: !Ref ECSCluster
      # DeploymentConfiguration: #TODO look into this.
      #   DeploymentConfiguration
      DesiredCount: !FindInMap [ environments, !Ref EnvironmentName, minCapacity ]
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - TargetGroupArn: !Ref PublicTargetGroup
          ContainerPort: 5000
          ContainerName:
            Fn::If:
              - Master
              - !Sub ${ApplicationName}-${EnvironmentName}
              - !Sub ${ApplicationName}-${branch}
      ServiceName:
        Fn::If:
              - Master
              - !Sub ${ApplicationName}-${EnvironmentName}-Public
              - !Sub ${ApplicationName}-${branch}-Public

      NetworkConfiguration:
        AwsvpcConfiguration:
          #          Change this to AssignPublicIp: DISABLED
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref EcsSecurityGroup
          Subnets:
            - !FindInMap [ !Ref "AWS::AccountId", !Ref "AWS::Region", risOldMainSubnetId4 ]
      # PlacementConstraints: #TODO look into this.
      #  - PlacementConstraints, ...
      # PlacementStrategies: #TODO look into this.
      #  - PlacementStrategies, ...
      # Role: String #TODO look into this.
      # SchedulingStrategy: String #TODO look into this.
      # ServiceRegistries: #TODO look into this.
      #  - ServiceRegistry
      TaskDefinition: !Ref Taskdefinition
  ############### NEW CLOUD WATCH ALARM FOR SERVICE #############
  PublicCPUUtilizationHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: NonProd
    Properties:
      AlarmName: !Sub VeryHighCPU-${ApplicationName}-${EnvironmentName}-public
      AlarmDescription: 'Service is running out of CPU'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value:
            Fn::If:
              - Master
              - !Sub ${ApplicationName}-${EnvironmentName}
              - !Sub ${ApplicationName}-${branch}
      - Name: ServiceName
        Value:
            Fn::If:
              - Master
              - !Sub ${ApplicationName}-${EnvironmentName}-public
              - !Sub ${ApplicationName}-${branch}-public
      MetricName: CPUUtilization
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      AlarmActions:
      - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:testing_CloudWatch_Alarms_Topic

  PublicMemoryUtilizationHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Condition: NonProd
    Properties:
      AlarmName: !Sub VeryHighMemory-${ApplicationName}-${EnvironmentName}-public
      AlarmDescription: 'Service is running out of Memory'
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value:
            Fn::If:
              - Master
              - !Sub ${ApplicationName}-${EnvironmentName}
              - !Sub ${ApplicationName}-${branch}
      - Name: ServiceName
        Value:
            Fn::If:
              - Master
              - !Sub ${ApplicationName}-${EnvironmentName}-public
              - !Sub ${ApplicationName}-${branch}-public
      MetricName: MemoryUtilization
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      AlarmActions:
      - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:testing_CloudWatch_Alarms_Topic

  ############### NEW ECS AUTOSCALING ###############
  PublicEcsScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: NonProd
    DependsOn:
      - EcsService
      - ECSCluster
    Properties:
      MaxCapacity: !FindInMap [ environments, !Ref EnvironmentName, maxCapacity ]
      MinCapacity: !FindInMap [ environments, !Ref EnvironmentName, minCapacity ]
      ResourceId: !Sub
        - service/${clusterName}/${serviceName}
        - clusterName: !Ref ECSCluster
          serviceName: !GetAtt PublicEcsService.Name
      RoleARN: !GetAtt [ EcsAutoScalingRole, Arn ]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  PublicEcsScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Condition: NonProd
    Properties:
      PolicyName: ServiceTargetTracking
      PolicyType: TargetTrackingScaling #StepScaling and TargetTrackingScaling supported
      ScalingTargetId: !Ref PublicEcsScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        DisableScaleIn: false
        ScaleInCooldown: 60
        ScaleOutCooldown: 15
        TargetValue: 80.0
########################DNS_RECORDSET############################
  Route53:
    Type: AWS::Route53::RecordSet
    Condition: DevEnvironment
    Properties:
      HostedZoneId: !FindInMap [ environments, !Ref EnvironmentName, hostedzoneid ]
      Comment: CNAME redirect for ELB
      Name: 
        Fn::If:
          - Production
          - !Sub portal.ris.7-eleven.com
          - !Sub portal.ris-${EnvironmentName}.7-eleven.com
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt LoadBalancer.DNSName
